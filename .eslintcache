[{"C:\\Users\\josh_\\reactapps\\gt-app\\src\\index.js":"1","C:\\Users\\josh_\\reactapps\\gt-app\\src\\serviceWorker.js":"2","C:\\Users\\josh_\\reactapps\\gt-app\\src\\App.js":"3","C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\store.js":"4","C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\index.js":"5","C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\rootReducer.js":"6","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\Notification.js":"7","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\layout\\Header.js":"8","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\Home.js":"9","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\pages\\About.js":"10","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\Settings.js":"11","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\pages\\Instructions.js":"12","C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\settings\\settingsReducer.js":"13","C:\\Users\\josh_\\reactapps\\gt-app\\src\\styles\\components\\appStyles.js":"14","C:\\Users\\josh_\\reactapps\\gt-app\\src\\styles\\base\\base.js":"15","C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\settings\\settingsActions.js":"16","C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\focus\\focusActions.js":"17","C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\course\\courseActions.js":"18","C:\\Users\\josh_\\reactapps\\gt-app\\src\\styles\\components\\homeStyles.js":"19","C:\\Users\\josh_\\reactapps\\gt-app\\src\\styles\\components\\headerStyles.js":"20","C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\course\\courseReducer.js":"21","C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\focus\\focusReducer.js":"22","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\SideView.js":"23","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\SaveChanges.js":"24","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\CGPACalculator.js":"25","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\ResetChanges.js":"26","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\ProgramMap.js":"27","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\GradeFilter.js":"28","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\GPASettings.js":"29","C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\settings\\settingsTypes.js":"30","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\SideViewHeader.js":"31","C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\focus\\focusTypes.js":"32","C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\course\\courseTypes.js":"33","C:\\Users\\josh_\\reactapps\\gt-app\\src\\styles\\components\\programmapStyles.js":"34","C:\\Users\\josh_\\reactapps\\gt-app\\src\\styles\\components\\sideviewStyles.js":"35","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\Term.js":"36","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\Progression.js":"37","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\AddTerm.js":"38","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\RemoveTerm.js":"39","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\model\\CourseClass.js":"40","C:\\Users\\josh_\\reactapps\\gt-app\\src\\hooks\\useWindowSize.js":"41","C:\\Users\\josh_\\reactapps\\gt-app\\src\\styles\\components\\animations.js":"42","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\Course.js":"43","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\AddCourse.js":"44","C:\\Users\\josh_\\reactapps\\gt-app\\src\\lib\\progression.js":"45","C:\\Users\\josh_\\reactapps\\gt-app\\src\\lib\\arboreal.js":"46","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\ImportExportSettings.js":"47"},{"size":675,"mtime":1598974126115,"results":"48","hashOfConfig":"49"},{"size":5086,"mtime":499162500000,"results":"50","hashOfConfig":"49"},{"size":5189,"mtime":1613088219893,"results":"51","hashOfConfig":"49"},{"size":281,"mtime":1599121333446,"results":"52","hashOfConfig":"49"},{"size":123,"mtime":1599705763217,"results":"53","hashOfConfig":"49"},{"size":364,"mtime":1599705799120,"results":"54","hashOfConfig":"49"},{"size":2353,"mtime":1612693488100,"results":"55","hashOfConfig":"49"},{"size":10973,"mtime":1601353574266,"results":"56","hashOfConfig":"49"},{"size":6353,"mtime":1613050916814,"results":"57","hashOfConfig":"49"},{"size":361,"mtime":1598391155243,"results":"58","hashOfConfig":"49"},{"size":1202,"mtime":1611967463758,"results":"59","hashOfConfig":"49"},{"size":3692,"mtime":1598807688028,"results":"60","hashOfConfig":"49"},{"size":1634,"mtime":1600068295725,"results":"61","hashOfConfig":"49"},{"size":422,"mtime":1611967519662,"results":"62","hashOfConfig":"49"},{"size":652,"mtime":1601354149480,"results":"63","hashOfConfig":"49"},{"size":1109,"mtime":1600042924115,"results":"64","hashOfConfig":"49"},{"size":1118,"mtime":1604758952577,"results":"65","hashOfConfig":"49"},{"size":2581,"mtime":1600070229724,"results":"66","hashOfConfig":"49"},{"size":2455,"mtime":1613065305086,"results":"67","hashOfConfig":"49"},{"size":768,"mtime":1612917334411,"results":"68","hashOfConfig":"49"},{"size":15722,"mtime":1612119284804,"results":"69","hashOfConfig":"49"},{"size":768,"mtime":1600406514025,"results":"70","hashOfConfig":"49"},{"size":10417,"mtime":1609225707881,"results":"71","hashOfConfig":"49"},{"size":478,"mtime":1602319627032,"results":"72","hashOfConfig":"49"},{"size":5327,"mtime":1612137207401,"results":"73","hashOfConfig":"49"},{"size":529,"mtime":1602319598230,"results":"74","hashOfConfig":"49"},{"size":6489,"mtime":1613072659053,"results":"75","hashOfConfig":"49"},{"size":2566,"mtime":1602135325356,"results":"76","hashOfConfig":"49"},{"size":6740,"mtime":1600824907034,"results":"77","hashOfConfig":"49"},{"size":307,"mtime":1600042927322,"results":"78","hashOfConfig":"49"},{"size":2298,"mtime":1609900440206,"results":"79","hashOfConfig":"49"},{"size":131,"mtime":1600403420075,"results":"80","hashOfConfig":"49"},{"size":712,"mtime":1598038256173,"results":"81","hashOfConfig":"49"},{"size":4258,"mtime":1613066021071,"results":"82","hashOfConfig":"49"},{"size":1669,"mtime":1600823487243,"results":"83","hashOfConfig":"49"},{"size":5391,"mtime":1605226495173,"results":"84","hashOfConfig":"49"},{"size":5891,"mtime":1605365843832,"results":"85","hashOfConfig":"49"},{"size":692,"mtime":1600559059887,"results":"86","hashOfConfig":"49"},{"size":1297,"mtime":1600559080864,"results":"87","hashOfConfig":"49"},{"size":300,"mtime":1596501913788,"results":"88","hashOfConfig":"49"},{"size":1195,"mtime":1604576258259,"results":"89","hashOfConfig":"49"},{"size":472,"mtime":1601442252423,"results":"90","hashOfConfig":"49"},{"size":8699,"mtime":1605961245096,"results":"91","hashOfConfig":"49"},{"size":3618,"mtime":1604732661472,"results":"92","hashOfConfig":"49"},{"size":684,"mtime":1599178279862,"results":"93","hashOfConfig":"49"},{"size":5809,"mtime":1598975870028,"results":"94","hashOfConfig":"49"},{"size":7598,"mtime":1612692150167,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"1h1q034",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"98"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"98"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"98"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"98"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"98"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"98"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"98"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"196","usedDeprecatedRules":"98"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"98"},"C:\\Users\\josh_\\reactapps\\gt-app\\src\\index.js",[],["200","201"],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\serviceWorker.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\App.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\store.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\index.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\rootReducer.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\Notification.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\layout\\Header.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\Home.js",["202"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nimport { \r\n  StyledInner,\r\n  StyledInnerTop,\r\n  StyledInnerBottom,\r\n  StyledInnerBottomHead,\r\n  StyledInnerBottomFoot\r\n} from '../styles/components/homeStyles';\r\n\r\n\r\nimport SaveChanges from './SaveChanges';\r\nimport GradeFilter from './GradeFilter';\r\nimport SideView from './SideView';\r\nimport ResetChanges from './ResetChanges';\r\nimport CGPACalculator from './CGPACalculator';\r\nimport ProgramMap from './ProgramMap';\r\nimport { notify } from './Notification';\r\nimport App from '../App';\r\nimport * as CourseActionCreators from '../redux';\r\nimport SideViewHeader from './SideViewHeader';\r\n\r\n\r\nclass Home extends Component {\r\n\r\n  componentWillUnmount = () => {\r\n    // this is a temporary fix for the problems that I'm getting with\r\n    // the focusElement and react-select not updating properly when you \r\n    // exit the Home component \r\n    this.props.clearSelected();\r\n  }\r\n  resetChanges = () => {\r\n    let confirmed = window.confirm(\"Are you sure you want to reset to the last saved changes?\");\r\n    if (!confirmed){\r\n      return;\r\n    }\r\n    this.props.populateCourseData();\r\n    this.props.clearFilter();\r\n    this.props.clearSelected();\r\n\r\n  }\r\n\r\n\r\n  /* Local Storage Saving / Retrieving */\r\n  saveCourseData = () =>{\r\n    let confirmed = window.confirm(\"Are you sure you want to save all the changes?\");\r\n    if (!confirmed){\r\n      return;\r\n    }\r\n    //alert(\"saving \" + JSON.stringify(this.state.courses) + \" into localStorage.\");\r\n    localStorage.setItem(App.localStorageKey, JSON.stringify(this.props.courses));\r\n    localStorage.setItem(App.localStorageKey+\"prereq\", JSON.stringify(this.props.prereq));\r\n    localStorage.setItem(App.localStorageKey+\"coreq\", JSON.stringify(this.props.coreq));\r\n    this.sendNotification('Changes saved');\r\n  }\r\n\r\n\r\n\r\n  // Finding the max number of courses out of all terms\r\n  getMaxCourseForYears = () => {\r\n      const max = Math.max(...this.props.courses.map((val, index) => val.length));\r\n      return max;\r\n  }\r\n\r\n  sendNotification = (msg) => {\r\n    notify(msg);\r\n  }\r\n\r\n  render(){\r\n    return (\r\n        <React.Fragment>\r\n            <StyledInner>\r\n              <StyledInnerTop>\r\n                <ProgramMap \r\n                handleClickAddTerm={this.props.addTerm}\r\n                handleClickRemoveTerm={this.props.removeTerm}\r\n                handleClickAddCourse={this.props.addCourse}\r\n                handleClickEditCourse={this.props.editCourse}\r\n                handleClickSelectCourse={this.props.toggleSelect}\r\n                handleClickDeleteCourse={this.props.deleteCourse}\r\n                maxCourseYears={this.getMaxCourseForYears()}\r\n                courses={this.props.courses}\r\n                selectedCourse={this.props.selectedCourse}\r\n                filteredCourses={this.props.filteredCourses}\r\n                />\r\n            </StyledInnerTop>\r\n            <StyledInnerBottom \r\n              expanded={(this.props.selectedCourse !== null)}\r\n            >\r\n              {/* Contains StyledInnerBottomHead */}\r\n              <SideViewHeader> \r\n\r\n                <SaveChanges\r\n                    onSaveClick={() => this.saveCourseData()}\r\n                />\r\n                <ResetChanges \r\n                    onResetClick={() => this.resetChanges()}\r\n                />\r\n                <GradeFilter\r\n                    onClickFilterByCategory={this.props.filterByCategory}\r\n                />\r\n                <CGPACalculator \r\n                    courses={this.props.courses}\r\n                /> \r\n              </SideViewHeader>\r\n              \r\n              <StyledInnerBottomFoot>\r\n                    \r\n                <SideView \r\n                    sendNotification={this.sendNotification}\r\n                    handleClickEditCourse={this.props.editCourse}\r\n                    courses={this.props.courses}\r\n                    selectedTerm={this.props.selectedTerm}\r\n                    selectedCourse={this.props.selectedCourse}\r\n                    prereq={this.props.prereq}\r\n                    coreq={this.props.coreq}\r\n                    handleClickEditPrereq={this.props.editPrereq}\r\n                    handleClickEditCoreq={this.props.editCoreq}\r\n                    handleClickShowPrereq={this.props.showPrereq}\r\n                    handleClickShowCoreq={this.props.showCoreq}\r\n                />\r\n              </StyledInnerBottomFoot>\r\n            </StyledInnerBottom>\r\n          </StyledInner>\r\n        </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n      courses: state.courses.courses,\r\n      filteredCourses: state.courses.filteredCourses,\r\n      selectedCourse: state.courses.selectedCourse,\r\n      selectedTerm: state.courses.selectedTerm,\r\n      prereq: state.courses.prereq,\r\n      coreq: state.courses.coreq\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = dispatch => {\r\n    return {\r\n      addCourse: (term, courseCode) => dispatch(CourseActionCreators.addCourse(term, courseCode)),\r\n      editCourse: (term, editedCourse) => dispatch(CourseActionCreators.editCourse(term, editedCourse)),\r\n      deleteCourse: (term, courseCode) => dispatch(CourseActionCreators.deleteCourse(term, courseCode)),\r\n      addTerm: () => dispatch(CourseActionCreators.addTerm()),\r\n      removeTerm: () => dispatch(CourseActionCreators.removeTerm()),\r\n      toggleSelect: (courseCode) => dispatch(CourseActionCreators.toggleSelectCourse(courseCode)),\r\n      clearSelected: () => dispatch(CourseActionCreators.clearSelected()),\r\n      filterByCategory: (category, value) => dispatch(CourseActionCreators.filterByCategory(category, value)),\r\n      clearFilter: () => dispatch(CourseActionCreators.clearFilter()),\r\n      editPrereq: (courseCode, prereqCourses) => dispatch(CourseActionCreators.editPrereq(courseCode, prereqCourses)),\r\n      editCoreq: (courseCode, coreqCourses) => dispatch(CourseActionCreators.editCoreq(courseCode, coreqCourses)),\r\n      showPrereq: (courseCode) => dispatch(CourseActionCreators.showPrereq(courseCode)),\r\n      showCoreq: (courseCode) => dispatch(CourseActionCreators.showCoreq(courseCode)),\r\n      loadCourses: (courses, prereq, coreq) => dispatch(CourseActionCreators.loadCourses(courses, prereq, coreq))\r\n    }\r\n  }\r\n  export default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(Home);","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\pages\\About.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\Settings.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\pages\\Instructions.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\settings\\settingsReducer.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\styles\\components\\appStyles.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\styles\\base\\base.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\settings\\settingsActions.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\focus\\focusActions.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\course\\courseActions.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\styles\\components\\homeStyles.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\styles\\components\\headerStyles.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\course\\courseReducer.js",["203","204","205"],"import * as courseTypes from './courseTypes';\r\n\r\nimport CourseClass from '../../componenets/model/CourseClass';\r\n\r\nconst initialState = {\r\n    courses: [[]], // 2d array, 1st dim = terms, 2nd dim = courses\r\n    filteredCourses: [], // array of courses to highlight\r\n    prereq: {}, // will be treated as a map/dictionary, stores all prerequisites for each course, values are arrays\r\n    coreq: [], // will be treated as an array of sets(but implmented as a 2d array)\r\n    selectedCourse: null, // current selected course\r\n    selectedTerm: null\r\n}\r\n\r\n// These are sample of the data that could be in the state\r\nconst SAMPLE_COURSES = [\r\n    [\r\n      new CourseClass(\"OO Prog\", \"PROG10082\", 3.3, 6),\r\n      new CourseClass(\"Intro to Data.\", \"TELE13167\", 2.6, 3),\r\n      new CourseClass(\"Web Dev.\", \"SYST10049\", 3.5, 3)\r\n    ],\r\n    [\r\n      new CourseClass(\"OO Prog 2\", \"PROG24178\", 3.0, 6),\r\n      new CourseClass(\"Data Netw. Design\", \"TELE33324\", 2.2, 3),\r\n      new CourseClass(\"Web Prog.\", \"SYST10199\", 2.6, 3)\r\n    ],\r\n    [\r\n      new CourseClass(\"JAVA\", \"PROG32758\", 3.3, 6),\r\n      new CourseClass(\"Comp. Sec.\", \"INFO24178\", 3.3, 3),\r\n      new CourseClass(\"Databases\", \"DBAS27198\", 3.3, 3)\r\n    ]\r\n  ]\r\n  \r\n  const SAMPLE_PREREQ = {\r\n    \"PROG24178\": [\"PROG10082\"],\r\n    \"PROG32758\": [\"PROG24178\"],\r\n    \"TELE33324\": [\"TELE13167\"],\r\n    \"SYST10199\": [\"SYST10049\"],\r\n  }\r\n  \r\n  const SAMPLE_COREQ = [\r\n    [\"PROG32758\", \"DBAS27198\"],\r\n  ]\r\n\r\n\r\nconst concatAtIndex = (list, index, item) => {\r\n    const listAlt = list.slice();\r\n    listAlt.slice(index, 0, item);\r\n    return listAlt;\r\n} \r\n\r\nconst removeAtIndex = (list, index) => {\r\n    const listAlt = list.slice();\r\n    listAlt.splice(index, 1);\r\n    return listAlt;\r\n} \r\n\r\n  // Goes through each of the sets in the coreq and combines them if they intersects with another\r\n const combineCoreqSets = (inputCoreq) => {\r\n    if (inputCoreq === null || inputCoreq.length === 0) return [];\r\n    let allcoreq = inputCoreq.slice();\r\n    \r\n    for (let i = 0; i < allcoreq.length; i++){\r\n      let first = allcoreq[i];\r\n      \r\n      for (let j = allcoreq.length - 1; j > i; j--){\r\n        let second = allcoreq[j];\r\n        if (intersects(first, second)){\r\n          allcoreq[i] = [...new Set(first.concat(second))];\r\n          allcoreq.splice(j,1);\r\n        }\r\n      }\r\n    }\r\n    return allcoreq;\r\n  }\r\n\r\nconst intersects = (first, second) => {\r\n    if (first === null || second === null) return false;\r\n    return first.findIndex(value => second.includes(value)) !== -1;\r\n  }\r\n\r\nconst getCoursesFromCodes = (codes, allcourses) =>{\r\n    allcourses = [].concat.apply([], allcourses);\r\n    let filtered = allcourses.filter(c => (codes.includes(c.code)));\r\n    return filtered;\r\n} \r\n\r\nconst deleteCoursesFromPrereq = (prereq, courseCodes) => {\r\n    // first delete the courseCode entry from the prerequisite map\r\n    courseCodes.forEach(courseCode => {\r\n        if (Object.prototype.hasOwnProperty.call(prereq, courseCode)) {\r\n            delete prereq[courseCode];\r\n        }\r\n    });\r\n    \r\n\r\n    // then delete the courseCodes if it is a prereq (value) for any other entry\r\n    for (let entry in prereq) {\r\n        if (Object.prototype.hasOwnProperty.call(prereq, entry)) {\r\n            prereq[entry] = prereq[entry].filter(c => !courseCodes.includes(c));\r\n            if (prereq[entry].length === 0){\r\n                delete prereq[entry];\r\n            }\r\n        }\r\n    }\r\n    \r\n    return prereq;\r\n}\r\n\r\nconst deleteCoursesFromCoreq = (coreq, courseCodes) => {\r\n\r\n\r\n    courseCodes.forEach(courseCode => { \r\n        // find the index of the 'set' that contains the courseCode, -1 if the code is not in any set\r\n        let index = coreq.findIndex(courseSet => courseSet.includes(courseCode));\r\n        if (index > -1){\r\n            coreq[index] = coreq[index].filter(c => c !== courseCode);\r\n            if (coreq[index].length === 0 || coreq[index].length === 1){\r\n                coreq.splice(index, 1);\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n\r\n    return coreq;\r\n}\r\n\r\n\r\n\r\nconst courseReducer = (state = initialState, action) => {\r\n    let term, termList, courseCode, i;\r\n    switch(action.type){\r\n        case courseTypes.ADD_TERM: \r\n            return {\r\n                ...state,\r\n                courses: \r\n                action.payload === -1\r\n                ? state.courses.concat([[]])\r\n                : concatAtIndex(state.courses, action.payload, []) // Not Tested\r\n            };\r\n        case courseTypes.REMOVE_TERM: \r\n\r\n            if (action.payload === -1){\r\n                return {\r\n                    ...state,\r\n                    courses: state.courses.slice(0, state.courses.length - 1),\r\n                    prereq: deleteCoursesFromPrereq(state.prereq, state.courses[state.courses.length - 1].map(c => c.code)),\r\n                    coreq: deleteCoursesFromCoreq(state.coreq, state.courses[state.courses.length - 1].map(c => c.code)),\r\n                    \r\n                    selectedCourse: (state.selectedCourse && state.courses[state.courses.length - 1].includes(state.selectedCourse))? null: state.selectedCourse,\r\n                    selectedTerm: (state.selectedCourse && state.courses[state.courses.length - 1].includes(state.selectedCourse))? null: state.selectedTerm,\r\n\r\n                }\r\n            }else{\r\n                // Not Tested\r\n                return {\r\n                    ...state,\r\n                    courses: removeAtIndex(state.courses, action.payload),  \r\n                    prereq: deleteCoursesFromPrereq(state.prereq, state.courses[action.payload].map(c => c.code)),\r\n                    coreq: deleteCoursesFromCoreq(state.coreq, state.courses[action.payload].map(c => c.code)),\r\n                                        \r\n                    selectedCourse: (state.selectedCourse && state.courses[action.payload].includes(state.selectedCourse))? null: state.selectedCourse,\r\n                    selectedTerm: (state.selectedCourse && state.courses[action.payload].includes(state.selectedCourse))? null: state.selectedTerm,\r\n\r\n                }\r\n            }\r\n            \r\n\r\n        case courseTypes.ADD_COURSE:\r\n            courseCode = action.payload.courseCode;\r\n            term = action.payload.term;\r\n            const course = CourseClass.EmptyCourse();\r\n            course.code = courseCode;\r\n            termList = state.courses.slice();\r\n            termList[term].push(course);\r\n            return {\r\n                ...state,\r\n                courses: termList\r\n            }\r\n        case courseTypes.EDIT_COURSE:\r\n            let { editedCourse } = action.payload;\r\n            term = action.payload.term;\r\n            termList = state.courses.slice();\r\n            termList[term] = termList[term].map(course => {\r\n                if (course.code === editedCourse.code){\r\n                    return editedCourse;\r\n                }else{\r\n                    return course;\r\n                } \r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                courses: termList\r\n            }\r\n\r\n        case courseTypes.DELETE_COURSE:\r\n            termList = state.courses.slice();\r\n            term = action.payload.term;\r\n            i = termList[term].findIndex(course => course.code === action.payload.courseCode);\r\n            termList[term].splice(i, 1);\r\n            return {\r\n                ...state,\r\n                courses: termList,\r\n                prereq: deleteCoursesFromPrereq(state.prereq, [action.payload.courseCode]),\r\n                coreq: deleteCoursesFromCoreq(state.coreq, [action.payload.courseCode]),\r\n                selectedCourse: (state.selectedCourse && action.payload.courseCode === state.selectedCourse.code)? null: state.selectedCourse,\r\n                selectedTerm: (state.selectedCourse && action.payload.courseCode === state.selectedCourse.code)? null: state.selectedTerm,\r\n            }\r\n        case courseTypes.FILTER:\r\n            let { category, value } = action.payload;\r\n            const unfiltered = [].concat.apply([], state.courses);\r\n            let filtered;\r\n            if(category === '1'){\r\n                filtered = unfiltered.filter(val => (val.grade > value));\r\n            }else if(category === '2'){\r\n                filtered = unfiltered.filter(val => (val.grade < value));\r\n            }else if(category === '3'){\r\n                filtered = unfiltered.filter(val => (val.grade === value));\r\n            }else if(category === '4'){\r\n                filtered = unfiltered.filter(val => (val.grade >= value));\r\n            }else if(category === '5'){\r\n                filtered = unfiltered.filter(val => (val.grade <= value));\r\n            }else{\r\n                filtered = unfiltered;\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                filteredCourses: filtered\r\n            }\r\n        case courseTypes.CLEAR_FILTER:\r\n            return {\r\n                ...state,\r\n                filteredCourses: []\r\n            }\r\n        case courseTypes.TOGGLE_SELECT:\r\n            const { selectedCourse } = state;\r\n            if(selectedCourse && selectedCourse.code === action.payload){\r\n                return {\r\n                    ...state,\r\n                    selectedCourse: null,\r\n                    selectedTerm: null,  \r\n                    filteredCourses: [],\r\n                }\r\n            }\r\n            let x, y;\r\n            for (x = 0; x < state.courses.length; x++){\r\n                y = state.courses[x].findIndex(val => val.code.trim() === action.payload.trim());\r\n        \r\n                if (y >= 0){\r\n        \r\n                  \r\n                  return{\r\n                      ...state,\r\n                    selectedCourse: state.courses[x][y],\r\n                    selectedTerm: x,  \r\n                    filteredCourses: []\r\n                  };\r\n                  \r\n                }\r\n              }\r\n        \r\n\r\n              return state;\r\n        case courseTypes.CLEAR_SELECT:\r\n            return {\r\n                ...state,\r\n                selectedCourse: null,\r\n                selectedTerm: null\r\n            }\r\n\r\n        case courseTypes.EDIT_PREREQ:\r\n            let prereqcopy = state.prereq;\r\n            prereqcopy[action.payload.courseCode] = action.payload.prereqCourses;\r\n            if (prereqcopy[action.payload.courseCode].length === 0){\r\n                delete prereqcopy[action.payload.courseCode];\r\n            }\r\n            return {\r\n                ...state,\r\n                prereq: prereqcopy\r\n            }\r\n        case courseTypes.EDIT_COREQ:\r\n            courseCode = action.payload.courseCode;\r\n            let coreqCourses = action.payload.coreqCourses;\r\n            let coreqcopy = state.coreq.slice();\r\n            // find the index of the 'set' that contains the courseCode, -1 if the code is not in any set\r\n            let index = coreqcopy.findIndex(courseSet => courseSet.includes(courseCode));\r\n\r\n            // if there are no supplied coreqs\r\n            // the user wants there to be no coreqCourses for this course\r\n            if (coreqCourses.length === 0){\r\n            \r\n                // delete the courseCode if index >= 0\r\n                if (index >= 0){\r\n                    coreqcopy[index].splice(coreqcopy[index].findIndex(c => c.code === courseCode), 1);\r\n                    if (coreqcopy[index].length === 0 || coreqcopy[index].length === 1){\r\n                        coreqcopy.splice(index, 1);\r\n                    }\r\n                    return {\r\n                        ...state,\r\n                        coreq: coreqcopy\r\n                    }\r\n                }\r\n                return state;\r\n            }\r\n\r\n            // if there are supplied coreqCourses\r\n\r\n\r\n            // if the course is not in the coreq list\r\n            if (index < 0){\r\n                // check if any of the coreq courses are already in the list. \r\n                // want to maintain only one set with each course\r\n                for (i = 0; i < coreqcopy.length; i++){\r\n                    if (coreqcopy[i].findIndex(c => coreqCourses.includes(c)) >= 0){\r\n                        index = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (index < 0){\r\n                // not in the list\r\n                coreqcopy.push([]);\r\n                coreqcopy[coreqcopy.length - 1].push(...coreqCourses, courseCode);\r\n            }else{\r\n                // if within the list\r\n                // concat the coreqlist \r\n        \r\n                // line below allows for deleting courses not found in coreqCourses \r\n                // in the case where the user is removing a course from the set\r\n                coreqcopy[index] = [...coreqCourses, courseCode];\r\n                \r\n                // remove duplicate values\r\n                coreqcopy[index] = [...new Set(coreqcopy[index])];\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                // function directly below helps prevent double entries\r\n                // If there are two sets that intersect,it will combine them.\r\n                // And if the user is combining a set with a single course, the set will be destroyed.\r\n                // (i.e. selecting a course that is not in a set and combining it with another that \r\n                // is in a set, the set of the later course will be destroyed, \r\n                // if both courses are each within different sets both sets will be combined)\r\n                // this function could behave weirdly with the code above that looks like:\r\n                // coreqcopy[index] = [...coreqCourses, courseCode]\r\n                // as that code deletes the previous set\r\n                coreq: combineCoreqSets(coreqcopy), \r\n            };\r\n\r\n        case courseTypes.SHOW_PREREQ:\r\n            const val = state.prereq[action.payload];\r\n            if (val !== undefined){\r\n                let filtered = getCoursesFromCodes(val, state.courses);\r\n                return {\r\n                    ...state,\r\n                    filteredCourses: filtered,\r\n                };\r\n            }\r\n            return {\r\n                ...state,\r\n                filteredCourses: []\r\n            };\r\n\r\n        case courseTypes.SHOW_COREQ:\r\n            \r\n            let selectedCoreqIndex = state.coreq\r\n            .findIndex(cl => cl.includes(action.payload));\r\n            \r\n            if (selectedCoreqIndex >= 0){\r\n                let list = state.coreq[selectedCoreqIndex];\r\n                list = list.filter(li => (li !== courseCode));\r\n                let filtered = getCoursesFromCodes(list, state.courses);\r\n                return{\r\n                    ...state,\r\n                    filteredCourses: filtered,\r\n                };\r\n            }\r\n            return {\r\n                ...state,\r\n                filteredCourses: []\r\n            };\r\n\r\n        case courseTypes.LOAD_COURSES:\r\n            return {\r\n                ...state,\r\n                courses: action.payload.courses,\r\n                prereq: action.payload.prereq,\r\n                coreq: action.payload.coreq\r\n            }\r\n\r\n        case courseTypes.DRAG_ENTER:\r\n            const newCourses = JSON.parse(JSON.stringify(state.courses));\r\n            const {params, currentItem} = action.payload;\r\n            newCourses[params.termI].splice(params.courseI, 0, newCourses[currentItem.termI].splice(currentItem.courseI, 1)[0]);\r\n            return {\r\n                ...state,\r\n                courses: newCourses,\r\n                selectedCourse: null,\r\n                selectedTerm: null,\r\n                filteredCourses: []\r\n            }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default courseReducer;\r\n\r\n\r\n\r\n","C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\focus\\focusReducer.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\SideView.js",["206","207","208","209","210"],"import React, { Component, useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { StyledButtonShow, StyledSelect, StyledContainer, StyleResponsiveContainer } from '../styles/components/sideviewStyles';\r\nimport { StyledButtonSave } from '../styles/components/programmapStyles';\r\nimport Progression from './Progression';\r\nimport { NonceProvider } from 'react-select';\r\n\r\n\r\nfunction SideView ({\r\n    sendNotification,\r\n    selectedCourse,\r\n    selectedTerm,\r\n    handleClickEditPrereq,\r\n    handleClickEditCoreq,\r\n    prereq, \r\n    coreq, \r\n    courses,\r\n    handleClickShowPrereq,\r\n    handleClickShowCoreq\r\n}) {\r\n\r\n    \r\n    const [state, setState] = useState({\r\n        prereqCourses: [],\r\n        coreqCourses:[]\r\n    });\r\n\r\n    \r\n    // New onChange(for 'react-select' component)\r\n    const onChange = (value, { name, action, removedValue }) => {\r\n        switch (action) {\r\n          case 'remove-value':\r\n            break;\r\n          case 'pop-value':\r\n            break;\r\n          case 'clear':\r\n            break;\r\n            default:\r\n        }\r\n        \r\n        setState({ \r\n            ...state,\r\n            [name]: value \r\n        });\r\n    }\r\n\r\n    // Transforms a course into a format used by 'react-select'\r\n    const getSelectOption = (course) => {\r\n        return {value: course.code, label: course.code };\r\n    }\r\n    // Transforms from 'react-select' option format to course code\r\n    const getValueFromSelectOption = (option) => {\r\n        return option.value;\r\n    }\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        // Notify the user that their changes have been set\r\n        sendNotification(\"Changes set\");\r\n        \r\n        // New onSubmit code\r\n        // must extract the value from the react-select components\r\n        const code = selectedCourse.code;\r\n        console.log(\"submitted\");\r\n        \r\n        let pC = state.prereqCourses || [];\r\n\r\n\r\n        console.log(\"prereq\");\r\n        const prs = pC.map(option => getValueFromSelectOption(option));\r\n        console.log(prs);\r\n        handleClickEditPrereq(code, prs);\r\n        \r\n\r\n        let cC = state.coreqCourses || [];\r\n\r\n        console.log(\"coreq\");\r\n        const crs = cC.map(option => getValueFromSelectOption(option));\r\n        \r\n        console.log(crs);\r\n        handleClickEditCoreq(code, crs);\r\n        //forceUpdate();\r\n\r\n        // Somehow the Progression child Component only recieves \r\n        // props and then rerenders when \r\n        // state changes locally in this component\r\n        setState({...state});\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        updateState();\r\n    }, [ prereq, coreq, courses, selectedCourse, selectedTerm]);\r\n    \r\n\r\n\r\n    \r\n\r\n    const updateState = () => {\r\n\r\n        if (!selectedCourse) return;\r\n\r\n        let selectedPrereqList = prereq[selectedCourse.code];\r\n        if (!selectedPrereqList){\r\n            selectedPrereqList = [];\r\n        }\r\n\r\n        console.log(\"selectedPrereqList\");\r\n        console.log(selectedPrereqList);\r\n        \r\n        let selectPrereq = courses.slice(0, selectedTerm);\r\n        let selectOptionsPrereq = [].concat.apply([], selectPrereq); // flatten the 2d array\r\n        \r\n        // get the full course details of the courses that are prereq\r\n        selectOptionsPrereq = selectOptionsPrereq\r\n        .filter(course => {\r\n            return course.code !== selectedCourse.code && selectedPrereqList.includes(course.code);\r\n        });\r\n        \r\n\r\n\r\n        let selectedCoreqIndex = coreq\r\n        .findIndex(cl => (cl.findIndex(c => c === selectedCourse.code) >= 0));\r\n        \r\n\r\n        let selectedCoreqList;\r\n        if (selectedCoreqIndex < 0){\r\n            selectedCoreqList = [];\r\n        }else{\r\n            selectedCoreqList = coreq[selectedCoreqIndex];\r\n        }\r\n\r\n        console.log(\"selectedCoreqList\");\r\n        console.log(selectedCoreqList);\r\n\r\n        \r\n        // get the full course details of the courses that are coreq\r\n        console.log(selectedTerm);\r\n        let selectOptionsCoreq = courses[selectedTerm];\r\n        if (selectOptionsCoreq == null){\r\n            selectOptionsCoreq = [];\r\n        }\r\n        selectOptionsCoreq = selectOptionsCoreq\r\n        .filter(course => {\r\n            return course.code !== selectedCourse.code && selectedCoreqList.includes(course.code) ;\r\n        });\r\n        \r\n\r\n        \r\n        setState({\r\n            ...state,\r\n            prereqCourses: selectOptionsPrereq.map(c => getSelectOption(c)),\r\n            coreqCourses: selectOptionsCoreq.map(c => getSelectOption(c)),\r\n        });\r\n        \r\n            \r\n        \r\n    }\r\n\r\n\r\n\r\n        const shouldShow = (selectedCourse !== null);\r\n        \r\n        if (!shouldShow){\r\n            return (\r\n                <StyledContainer>\r\n                    <h2>Advanced Course Edit</h2>\r\n                    <p>You must select a course first</p>\r\n                    \r\n                </StyledContainer>\r\n            );\r\n        }\r\n        \r\n        \r\n\r\n\r\n    \r\n\r\n        // get the available options for the prereq courses\r\n        let selectPrereq = courses.slice(0, selectedTerm);\r\n        let selectOptionsPrereq = [].concat.apply([], selectPrereq); // flatten the 2d array\r\n        \r\n        selectOptionsPrereq = selectOptionsPrereq\r\n        .map((course) =>{\r\n            return getSelectOption(course);\r\n        });\r\n        \r\n        \r\n\r\n\r\n        // get the available options for the coreq courses\r\n        let selectOptionsCoreq = courses[selectedTerm];\r\n        \r\n        if (selectOptionsCoreq == null){\r\n            selectOptionsCoreq = [];\r\n        }\r\n        selectOptionsCoreq = selectOptionsCoreq\r\n        .filter(course => {\r\n            return course.code !== selectedCourse.code;\r\n        })\r\n        .map(course =>{\r\n            return getSelectOption(course);\r\n        });\r\n        \r\n\r\n\r\n       \r\n        const form = \r\n                <form\r\n                onSubmit={onSubmit}\r\n                sytle={formStyle}\r\n                className=\"sideViewForm\"\r\n                >\r\n                    \r\n                    \r\n                    <div>\r\n                        <label>Prerequisites</label>\r\n                        <br/>\r\n                        <StyledButtonShow\r\n                            style={buttonShowStyle}\r\n                            type=\"button\"\r\n                            onClick={handleClickShowPrereq.bind(this, selectedCourse.code)}\r\n                        >Highlight Pre-requisites</StyledButtonShow>\r\n                        <StyledSelect \r\n                            \r\n                            styles={customStyles}\r\n                            onChange={onChange}\r\n                            name=\"prereqCourses\"\r\n                            isMulti \r\n                            options={selectOptionsPrereq}\r\n                            value={state.prereqCourses}\r\n                        />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label>Corequisites</label>\r\n                        <br/>\r\n                        <StyledButtonShow \r\n                            style={buttonShowStyle}\r\n                            type=\"button\"\r\n                            onClick={handleClickShowCoreq.bind(this, selectedCourse.code)}\r\n                        >Highlight Co-requisites</StyledButtonShow>\r\n                        <StyledSelect \r\n                            \r\n                            styles={customStyles}\r\n                            onChange={onChange}\r\n                            name=\"coreqCourses\"\r\n                            isMulti \r\n                            options={selectOptionsCoreq}\r\n                            value={state.coreqCourses}\r\n                        />\r\n                    </div>\r\n                \r\n                    <div style={{textAlign:'center', fontWeight:'bold'}}>\r\n                        Remember to click accept changes after making changes\r\n                    </div>\r\n\r\n   \r\n                    <StyledButtonSave type=\"submit\">Accept Changes</StyledButtonSave>\r\n  \r\n                         \r\n                </form>\r\n                ;\r\n\r\n\r\n\r\n\r\n        return (\r\n            <StyledContainer>\r\n                \r\n                <h2>Advanced Course Edit</h2>\r\n                <h3>For course: {selectedCourse.code}</h3>\r\n                    \r\n                <StyleResponsiveContainer>\r\n                    {form}\r\n                    <Progression\r\n                            prereq={prereq}\r\n                            selectedCourse={selectedCourse}\r\n                    />  \r\n                </StyleResponsiveContainer>\r\n            </StyledContainer>\r\n        );\r\n        \r\n    \r\n}   \r\n\r\n\r\n// PropTypes\r\nSideView.propType = {\r\n    sendNotification: PropTypes.func.isRequired,\r\n    handleClickEditCourse: PropTypes.func.isRequired,\r\n    courses: PropTypes.array.isRequired,\r\n    selectedTerm: PropTypes.number.isRequired,\r\n    selectedCourse: PropTypes.object.isRequired,\r\n    prereq: PropTypes.array.isRequired,\r\n    coreq: PropTypes.array.isRequired,\r\n    handleClickEditPrereq: PropTypes.func.isRequired,\r\n    handleClickEditCoreq: PropTypes.func.isRequired,\r\n}\r\n\r\n// const sideViewStyle = {\r\n//     background: 'lightgrey',\r\n//     width: '100%',\r\n//     textAlign: 'center',\r\n//     border: '2px solid grey',    \r\n//     overflowY: 'scroll',\r\n//     height: '100%', \r\n// }\r\n\r\nconst buttonShowStyle = {\r\n    \r\n}\r\n\r\n\r\nconst formStyle = {\r\n    border: 'none',\r\n    margin: '0 auto',\r\n}\r\n\r\n// Custom style for 'react-select', uses Emotion JS\r\nconst customStyles = {\r\n    container: (provided, state) => ({\r\n        ...provided,\r\n        // none of react-select's styles are passed to <Control />\r\n        \r\n      }),\r\n\r\n      control: (provided, state) => ({\r\n        ...provided,\r\n        overflowY: 'scroll',\r\n        height: 30,\r\n        boxShadow: state.isFocused? '0 0 0 1px #3CB371': 'none',\r\n        //borderColor: state.isFocused || state.isSelected || state.isActive ? '#3CB371': 'transparent',\r\n        //boxShadow: state.isFocused || state.isSelected || state.isActive ? '0 0 0 .2rem rgba(60,179,113, 0.2)': 'none',\r\n        //outline: state.isFocused || state.isSelected ||  state.isActive ? '1px solid rgba(60,179,113, 0.2)': 'none',\r\n    }),\r\n      input: (provided, state) => ({\r\n          ...provided,\r\n      })\r\n\r\n\r\n}\r\n\r\n\r\nexport default SideView\r\n","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\SaveChanges.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\CGPACalculator.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\ResetChanges.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\ProgramMap.js",["211","212","213","214"],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\GradeFilter.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\GPASettings.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\settings\\settingsTypes.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\SideViewHeader.js",["215","216"],"import React, { useState, useRef, useEffect, Fragment } from 'react'\r\n\r\nimport useWindowSize from '../hooks/useWindowSize';\r\nimport { \r\n    StyledInnerBottomHead,\r\n    StyledInnerBottomHeadContainer\r\n  } from '../styles/components/homeStyles';\r\n\r\n\r\nfunction SideViewHeader(props) {\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n    const [maxPages, setMaxPages] = useState(1);\r\n    //const [lastScrollTop, setLastScrollTop] = useState(0);\r\n    //const [canScroll, setCanScroll] = useState(true);\r\n\r\n    const size = useWindowSize();\r\n\r\n    const sideViewHeaderContainer = useRef(null);\r\n\r\n\r\n    useEffect(() => {\r\n        resetScrollProperties();\r\n    }, [size.width, size.height]);\r\n\r\n    const resetScrollProperties = () => {\r\n        if (sideViewHeaderContainer.current){\r\n            let { scrollHeight, clientHeight, scrollTop } = sideViewHeaderContainer.current;\r\n            \r\n            setMaxPages(scrollHeight / clientHeight);\r\n            //setPageNumber(Math.floor(scrollTop / clientHeight) + 1);\r\n            //setLastScrollTop(0);\r\n            sideViewHeaderContainer.current.scrollTo({\r\n                top: 0,\r\n                left: 0,\r\n                behavior: 'smooth'\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    const scrollContainer = (e) => {\r\n        \r\n        if (sideViewHeaderContainer.current){\r\n          let { scrollTop, clientHeight, scrollHeight } = sideViewHeaderContainer.current;\r\n          \r\n          setPageNumber(Math.floor(scrollTop / clientHeight) + 1);\r\n          setMaxPages(scrollHeight / clientHeight);\r\n\r\n        }\r\n    } \r\n\r\n\r\n    return (\r\n        <StyledInnerBottomHeadContainer>\r\n            <div \r\n                style={pageIndicatorStyle}\r\n            >\r\n                {pageNumber}/{maxPages}\r\n            </div>\r\n            <StyledInnerBottomHead\r\n                \r\n                ref={sideViewHeaderContainer}\r\n                onScroll={scrollContainer}\r\n                \r\n            >\r\n                {props.children}\r\n            </StyledInnerBottomHead>\r\n            \r\n        </StyledInnerBottomHeadContainer>\r\n        \r\n    )\r\n}\r\n\r\nexport default SideViewHeader\r\n\r\n\r\nconst pageIndicatorStyle = {\r\n    \r\n    color:'#fff',\r\n    borderRadius: '5px',\r\n    border: '2px solid grey',\r\n    padding: '5px',\r\n    margin: '5px',\r\n}\r\n","C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\focus\\focusTypes.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\redux\\course\\courseTypes.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\styles\\components\\programmapStyles.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\styles\\components\\sideviewStyles.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\Term.js",["217","218","219"],"import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport { changeStyle, clearSelected } from '../redux/index';\r\n//import { outlineElementStyle } from '../redux/focus/focusActions'\r\nimport AddCourse from './AddCourse';\r\nimport Course from './Course';\r\nimport { \r\n    StyledTermRow,\r\n    StyledMapHeading,\r\n    StyledMapData\r\n} from '../styles/components/programmapStyles';\r\n\r\nexport const Term = ({\r\n    isSelected,\r\n    termNumber, \r\n    courseList, \r\n    filteredCourses, \r\n    selectedCourse, \r\n    handleClickEditCourse, \r\n    handleClickDeleteCourse, \r\n    handleClickSelectCourse, \r\n    handleClickAddCourse,\r\n\r\n    \r\n\r\n    // focus\r\n    toggleFocus\r\n\r\n}) => {\r\n\r\n        const [editing, setEditing] = useState(false);\r\n        const dispatch = useDispatch();\r\n        //const { currentFocusedElm, style } = useSelector(state => state.focus);\r\n        \r\n        \r\n        const index = termNumber;\r\n        const termDisplay = \r\n        (<StyledMapHeading \r\n            key={index + \"x\" + -1} \r\n            style={termDisplayStyle}\r\n            isEditing={editing}\r\n        >\r\n            {index + 1}\r\n            <br />\r\n            <svg \r\n                className=\"svg-icon\" \r\n                viewBox=\"0 0 20 20\"\r\n                onClick={() => {\r\n                    \r\n                    setEditing(!editing);\r\n                    \r\n                    // Give the UI time to update then readjust the focus element after\r\n                    setTimeout(() =>\r\n                        dispatch(changeStyle())\r\n                    , 500)\r\n                }}\r\n            >\r\n                <path fill=\"none\" d=\"M19.404,6.65l-5.998-5.996c-0.292-0.292-0.765-0.292-1.056,0l-2.22,2.22l-8.311,8.313l-0.003,0.001v0.003l-0.161,0.161c-0.114,0.112-0.187,0.258-0.21,0.417l-1.059,7.051c-0.035,0.233,0.044,0.47,0.21,0.639c0.143,0.14,0.333,0.219,0.528,0.219c0.038,0,0.073-0.003,0.111-0.009l7.054-1.055c0.158-0.025,0.306-0.098,0.417-0.211l8.478-8.476l2.22-2.22C19.695,7.414,19.695,6.941,19.404,6.65z M8.341,16.656l-0.989-0.99l7.258-7.258l0.989,0.99L8.341,16.656z M2.332,15.919l0.411-2.748l4.143,4.143l-2.748,0.41L2.332,15.919z M13.554,7.351L6.296,14.61l-0.849-0.848l7.259-7.258l0.423,0.424L13.554,7.351zM10.658,4.457l0.992,0.99l-7.259,7.258L3.4,11.715L10.658,4.457z M16.656,8.342l-1.517-1.517V6.823h-0.003l-0.951-0.951l-2.471-2.471l1.164-1.164l4.942,4.94L16.656,8.342z\"></path>\r\n            </svg>\r\n        </StyledMapHeading>);\r\n        const coursesDisplay = \r\n        courseList.map((val, ind) => {\r\n                        \r\n            const isHighlightedCourse = (filteredCourses.find(val1 => \r\n                (val1.code === val.code)) !== undefined);            \r\n\r\n            const isSelectedCourse = selectedCourse && selectedCourse.code === val.code;\r\n                \r\n            \r\n            return (<Course \r\n                        key={val.code}\r\n                        \r\n                        \r\n                        termIndex={index}\r\n                        courseIndex={ind}\r\n\r\n                        toggleFocus={toggleFocus}\r\n                        \r\n                        term={index}\r\n                        handleClickEditCourse={handleClickEditCourse}\r\n                        handleClickDeleteCourse={handleClickDeleteCourse}\r\n                        handleClickSelectCourse={handleClickSelectCourse}\r\n                        course={val}\r\n                        isSelected={isSelectedCourse}\r\n                        isHighlighted={isHighlightedCourse}\r\n                        isEditing={editing}\r\n                    />);\r\n        });\r\n        const newCourseButtonDisplay = (\r\n        <StyledMapData key={index + \"x\" + (coursesDisplay.length + 1)}>\r\n            <AddCourse \r\n                term={termNumber}\r\n                handleClickAddCourse={handleClickAddCourse}\r\n            />\r\n        </StyledMapData>);\r\n\r\n        return (\r\n        <Droppable \r\n            droppableId={`${index}`}\r\n            direction={'horizontal'}\r\n        >\r\n        {(provided, _ ) => (\r\n        <StyledTermRow\r\n                    ref={provided.innerRef}\r\n                    {...provided.droppableProps}\r\n                    //onDragEnter={isDragging && !courseList.length?(e) => handleDragEnter(e, {termI: index, courseI: 0}):null}\r\n                    className={isSelected?\"selected-term\":\"\"}\r\n                    scope=\"row\"\r\n        \r\n                >\r\n                    {termDisplay}\r\n                    \r\n                            \r\n                    {coursesDisplay}\r\n                    {provided.placeholder}\r\n                    {newCourseButtonDisplay}\r\n                </StyledTermRow>\r\n                )}\r\n        </Droppable>\r\n                );\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n// PropTypes\r\nTerm.propType = {\r\n    courseList: PropTypes.array.isRequired,\r\n    termNumber: PropTypes.number.isRequired,\r\n    handleClickAddCourse: PropTypes.func.isRequired,\r\n    handleClickEditCourse: PropTypes.func.isRequired,\r\n    handleClickDeleteCourse: PropTypes.func.isRequired,\r\n    handleClickSelectCourse: PropTypes.func.isRequired,\r\n    selectedCourse: PropTypes.object.isRequired,\r\n    filteredCourses: PropTypes.array.isRequired,\r\n}\r\n\r\nconst termDisplayStyle = {\r\n    textAlign:'center'\r\n};\r\n\r\nexport default Term\r\n","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\Progression.js",["220"],"import * as Arborel from '../lib/arboreal';\r\nimport { buildTreeObject } from '../lib/progression';\r\nimport React, { useEffect, useRef} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CourseClass from './model/CourseClass';\r\nimport { StyledCanvasContainer } from '../styles/components/sideviewStyles';\r\n\r\nfunction Node(props) {\r\n    const {ctx, x, y, radius, text} = props;\r\n    \r\n    if (props.parentX && props.parentY){\r\n        ctx.moveTo(x, y);\r\n        ctx.lineTo(props.parentX, props.parentY);\r\n        ctx.stroke();\r\n    }\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, radius, 0, 2 * Math.PI);\r\n    ctx.stroke();\r\n    ctx.font = \"10px Arial\";\r\n    ctx.fillText(text, x, y);\r\n    console.log(\"RERENDERED\");\r\n}\r\n\r\n\r\nfunction Progression(props) {\r\n    const prereqObject = buildTreeObject(props.prereq, props.selectedCourse.code);\r\n    //console.log(props.prereq)\r\n    //console.log(prereqObject);\r\n    \r\n    console.log(\"RERENDERED PROGRESSION\");\r\n    var tree = Arborel.Arboreal.parse(prereqObject, 'prerequisites');\r\n    //let value = [];\r\n    let leafNodes = [];\r\n    let maxDepth = 0;\r\n    let maxSiblingCount = 1;\r\n    let nodeRadius = 20;\r\n    let distanceBetweenNodes = nodeRadius * 2 + 1;\r\n    let theCanvas = useRef(null);\r\n    let theContainer = useRef(null);\r\n    \r\n    tree.traverseDown(node => {\r\n        if (node.depth > maxDepth){\r\n            maxDepth = node.depth;\r\n        }\r\n        if (node.children.length > maxSiblingCount){\r\n            maxSiblingCount = node.children.length;\r\n        }\r\n    });\r\n    let rootNodePosition = distanceBetweenNodes \r\n    * Math.pow(maxSiblingCount, maxDepth);\r\n    let canvasDimentionY = rootNodePosition  * 2 + 100; // 100px padding\r\n    let canvasDimentionX = (distanceBetweenNodes + 50) * (maxDepth + 1) + 100;\r\n\r\n    function updateState(){\r\n        const ctx = theCanvas.current.getContext('2d');\r\n        ctx.clearRect(0,0, canvasDimentionX, canvasDimentionY);\r\n        \r\n        console.log(\"CANVAS CLEARED\");\r\n        tree\r\n        //.find(node => node.data.courseCode === nodeName)\r\n        .traverseDown(iterator);\r\n    }\r\n    \r\n    function iterator (node) {\r\n        let numOfSiblings = (node.parent)? node.parent.children.length : 1;\r\n        let positionInSibling = 0;\r\n        if (node.parent){\r\n            positionInSibling = node.parent.children.findIndex(n => n.data.courseCode === node.data.courseCode);\r\n        }\r\n\r\n        let nodePosition = 0;\r\n        if (numOfSiblings % 2 === 0){\r\n            let x = numOfSiblings / 2 - 0.5 - positionInSibling;\r\n            if (x < 0){\r\n                x = Math.floor(x);\r\n            }else{\r\n                x = Math.ceil(x);\r\n            }\r\n            nodePosition = x * -1;\r\n        }else{\r\n            nodePosition = (Math.floor(numOfSiblings / 2) - positionInSibling) * -1;\r\n        }\r\n        \r\n        //node.data.yPos = (node.parent)? node.parent.data.yPos + nodePosition * distanceBetweenNodes * maxSiblingCount : distanceBetweenNodes * maxDepth * maxSiblingCount;\r\n        \r\n        node.data.yPos = (node.parent)? node.parent.data.yPos \r\n        + nodePosition * distanceBetweenNodes \r\n        * Math.pow(maxSiblingCount, maxDepth - node.depth) \r\n        : rootNodePosition;\r\n        \r\n        // var depth = \"\", i;\r\n        // for (i = 1; i <= node.depth; i++) depth += \"--\";\r\n        //console.log([depth, node.data.courseCode].join(\" \"));\r\n        //value.push(<span>{[depth, node.data.courseCode].join(\">\")}</span>);\r\n        //value.push(node.data.courseCode);\r\n        // value.push(\r\n        // <StyledCanvasNode \r\n        //     x={(maxDepth - node.depth) * (distanceBetweenNodes + 20)} \r\n        //     y={node.data.yPos} \r\n        //     radius={nodeRadius}\r\n        // >\r\n        //     {node.data.courseCode} -//- {nodePosition}\r\n        // </StyledCanvasNode>\r\n        // );\r\n        const ctx = theCanvas.current.getContext('2d');\r\n        if (node.parent){\r\n            Node({\r\n                ctx, \r\n                y: node.data.yPos + 50, \r\n                x: (maxDepth - node.depth) * (distanceBetweenNodes + 20) + 50, \r\n                radius: nodeRadius, \r\n                text: `${node.data.courseCode}`, \r\n                parentY: node.parent.data.yPos + 50, \r\n                parentX: (maxDepth - node.parent.depth) * (distanceBetweenNodes + 20) + 50\r\n            });\r\n        }else{\r\n            Node({\r\n                ctx, \r\n                y: node.data.yPos + 50, \r\n                x: (maxDepth - node.depth) * (distanceBetweenNodes + 20) + 50, \r\n                radius: nodeRadius, \r\n                text: `${node.data.courseCode}`\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    function iteratorLeafNodes (node) {\r\n        if (node.children.length === 0){\r\n            leafNodes.push(node.data.courseCode);\r\n        }\r\n    }\r\n\r\n\r\n    // find all the leafNodes\r\n    tree\r\n    .traverseDown(iteratorLeafNodes);\r\n\r\n    const selectedCoursePrereq = props.prereq[props.selectedCourse.code];\r\n    useEffect(() => {\r\n        if (theContainer){\r\n            theContainer.current.scrollTo(0,rootNodePosition);\r\n        }\r\n        updateState();\r\n    },[props.selectedCourse, selectedCoursePrereq]);\r\n    \r\n    //value = value.reverse()\r\n    return (\r\n        <div>\r\n        <h2>Course prerequisites</h2>\r\n        \r\n        <StyledCanvasContainer\r\n            ref={theContainer}\r\n        >\r\n            {/* {value} */}\r\n            <canvas \r\n                //  style={{ background: 'darkgrey', border: '2px solid black'}} \r\n                ref={theCanvas} \r\n                width={canvasDimentionX} \r\n                height={canvasDimentionY}\r\n            ></canvas>\r\n        </StyledCanvasContainer>\r\n        <br />\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\n// PropTypes\r\nProgression.propType = {\r\n    prereq: PropTypes.object.isRequired,\r\n    selectedCourse: PropTypes.objectOf(CourseClass).isRequired,\r\n}\r\n\r\nexport default Progression\r\n","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\AddTerm.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\RemoveTerm.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\model\\CourseClass.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\hooks\\useWindowSize.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\styles\\components\\animations.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\Course.js",["221"],"import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport composeRefs from '@seznam/compose-react-refs'\r\n\r\nimport CourseClass from './model/CourseClass';\r\nimport { FormGroup, Label, Input } from 'reactstrap';\r\nimport { StyledCourseData , StyledButtonDelete, StyledButton, StyledButtonSave } from '../styles/components/programmapStyles';\r\n\r\n\r\nexport class Course extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            courseName: this.props.course.name,\r\n            grade: this.props.course.grade,\r\n            credits:this.props.course.credits,\r\n            message: 'Messages here',\r\n        }\r\n        this.theContainer = React.createRef();\r\n        this.theForm = React.createRef();\r\n        this.timeout = null;\r\n    }\r\n\r\n    performValidation = (editedCourse) => {\r\n        editedCourse.grade = Number(editedCourse.grade);\r\n        editedCourse.credits = Number(editedCourse.credits);\r\n        if (isNaN(editedCourse.grade)){\r\n            return 1;\r\n        }\r\n        if (isNaN(editedCourse.credits)){\r\n            return 2;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    \r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        let editedCourse = \r\n        new CourseClass(this.state.courseName, this.props.course.code, this.state.grade, this.state.credits);\r\n        \r\n        let successCode = this.performValidation(editedCourse);\r\n        switch(successCode){\r\n            case 0:\r\n                editedCourse.grade = Number(editedCourse.grade);\r\n                editedCourse.credits = Number(editedCourse.credits);\r\n                this.props.handleClickEditCourse(this.props.term, editedCourse);\r\n                this.setState({message: 'Messages here'});\r\n                break;\r\n            case 1:\r\n                this.setState({message: 'grade must be a number'});\r\n                break;\r\n            case 2:\r\n                this.setState({message: 'credits must be a number'});\r\n                break;\r\n            default:\r\n                this.setState({message: 'Messages here'});\r\n\r\n        }\r\n    }\r\n\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value });\r\n\r\n    onSelect = (e) => {\r\n        \r\n        if(this.theContainer.current && !this.props.isSelected){\r\n            if (this.timeout)\r\n                clearTimeout(this.timeout);\r\n\r\n            this.timeout = setTimeout(() => {\r\n                //console.log(this);\r\n                // set the focus on the container element after the select button is cliked\r\n                // and setTimeout performs this after css removes the container from view\r\n                this.theContainer.current.focus();\r\n                this.theContainer.current.scrollIntoView({behavior: \"smooth\", block: \"start\", inline: \"nearest\"});\r\n            }, 500); // 2sec is the transition\r\n            //alert(this.selectButton);\r\n        }\r\n        this.props.handleClickSelectCourse(this.props.course.code);\r\n\r\n        this.props.toggleFocus(this.theContainer, this.props.course);\r\n\r\n    }\r\n\r\n    render(){\r\n        const { termIndex, courseIndex, isEditing } = this.props;\r\n       const {code, name, grade, credits} = this.props.course;\r\n        let appliedclasses = \"course\";\r\n        appliedclasses += this.props.isHighlighted? \" highlighted\" : \"\";\r\n        appliedclasses += this.props.isSelected? \" selected \" : \"\";\r\n        return(\r\n       <Draggable\r\n            draggableId={`draggable-${code}`}\r\n            index={courseIndex}\r\n       >\r\n       {(provided, snapshot) => (\r\n       <StyledCourseData \r\n                className=\"course\"\r\n                isEditing={isEditing}\r\n                ref={composeRefs(provided.innerRef, this.theContainer)}\r\n                {...provided.draggableProps}\r\n                \r\n            >\r\n            <form\r\n            onSubmit={this.onSubmit}\r\n            style={courseStyle}\r\n            className={appliedclasses}\r\n            ref={this.theForm}\r\n            >\r\n            \r\n                <span\r\n                    className=\"dragholder\" \r\n                    style={dragholder}\r\n                    {...provided.dragHandleProps}\r\n                >\r\n                \r\n                </span>\r\n                {(isEditing && (\r\n                <Label style={{alignSelf:'center'}}>\r\n                    {this.state.message}\r\n                </Label>))}\r\n                <FormGroup>\r\n                    <span>\r\n                    <Label>Course Code:</Label>{' '}\r\n                    {code}\r\n                    </span>\r\n                    <br />\r\n                    <span>\r\n                    <Label>Name:</Label>{' '}\r\n                    {name}\r\n                    </span>\r\n                    \r\n                    <br /> \r\n                    {(isEditing && (\r\n                    <span>\r\n                    <Label for=\"newNameInput\">New Name:</Label>{' '}\r\n                    <Input \r\n                        id=\"newNameInput\"\r\n                        style={inputStyle}\r\n                        type=\"text\"\r\n                        name=\"courseName\"\r\n                        value={this.state.courseName}\r\n                        onChange={this.onChange}\r\n                    />\r\n                    </span>))}\r\n                    <br />\r\n                    <span>\r\n                    <Label>Grade:</Label>{' '}\r\n                    {grade}\r\n                    </span>\r\n                    <br />\r\n                    {(isEditing && (\r\n                    <span>\r\n                    <Label for=\"newGradeInput\">New Grade:</Label>{' '}\r\n                    <Input \r\n                        id=\"newGradeInput\"\r\n                        style={inputStyle}\r\n                        type=\"text\"\r\n                        name=\"grade\"\r\n                        value={this.state.grade}\r\n                        onChange={this.onChange}\r\n                    />\r\n                    </span>))}\r\n                    <br />\r\n                    <span>\r\n                    <Label>Credits/Units:</Label>{' '}\r\n                    {credits}\r\n                    </span>\r\n                    <br />\r\n                    {(isEditing && (<span>\r\n                    <Label for=\"newCreditInput\">New Credits:</Label>{' '}\r\n                    <Input \r\n                        id=\"newCreditInput\"\r\n                        style={inputStyle}\r\n                        type=\"text\"\r\n                        name=\"credits\"\r\n                        value={this.state.credits}\r\n                        onChange={this.onChange}\r\n                    />\r\n                    </span>))}\r\n                </FormGroup>\r\n                <StyledButton \r\n                    style={buttonStyle}\r\n                    type=\"button\"\r\n                    onClick={\r\n                        this.onSelect\r\n                    }\r\n                >{this.props.isSelected?\"Deselect\":\"Select\"}</StyledButton>\r\n                {(isEditing && (<StyledButtonSave \r\n                    style={buttonStyle}\r\n                    type=\"submit\"\r\n                >Set changes</StyledButtonSave>))}\r\n                {(isEditing && (\r\n                <StyledButtonDelete \r\n                    style={buttonStyle}\r\n                    type=\"button\"\r\n                    onClick={\r\n                        this.props.handleClickDeleteCourse.bind(this,this.props.term, this.props.course.code)\r\n                    }\r\n                >Delete(-)</StyledButtonDelete>))}\r\n                \r\n            </form>\r\n        </StyledCourseData>\r\n        )}\r\n        </Draggable>\r\n       )\r\n\r\n         \r\n\r\n    }\r\n}\r\n\r\n\r\n// PropTypes\r\nCourse.propType = {\r\n    handleClickEditCourse: PropTypes.func.isRequired,\r\n    course: PropTypes.instanceOf(CourseClass).isRequired,\r\n    term: PropTypes.number.isRequired,\r\n    isSelected: PropTypes.bool.isRequired,\r\n    handleClickDeleteCourse: PropTypes.func.isRequired,\r\n    handleClickSelectCourse: PropTypes.func.isRequired,\r\n    isHighlighted: PropTypes.bool.isRequired,\r\n}\r\nconst dragholder = {\r\n    width: '100%',\r\n    background: 'lightgrey',\r\n    height: '15px',\r\n    borderRadius: '3px',\r\n    cursor: 'grab',\r\n    border: '1px solid black'\r\n}\r\n\r\nconst inputStyle = {\r\n    width: '100%',\r\n    background: 'lightgrey',\r\n    borderRadius: '5px',\r\n    padding:'2px 4px',\r\n}\r\n\r\nconst courseStyle = {\r\n    display:'flex', \r\n    flexDirection:'column',\r\n    justifyContent: 'space-between',\r\n    overflow: 'hidden',\r\n    borderRadius: '5px',\r\n    fontWeight: 'bold',\r\n    height: '100%',\r\n    width: '100%',\r\n    padding: '5px', \r\n};\r\n\r\nconst buttonStyle = {\r\n    marginTop:'2px',\r\n    borderRadius: '5px',\r\n}\r\n\r\nexport default Course","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\AddCourse.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\lib\\progression.js",[],"C:\\Users\\josh_\\reactapps\\gt-app\\src\\lib\\arboreal.js",["222","223","224","225"],"//!function () {\n  'use strict';\n\n  export function include (array, item) {\n    return array.indexOf(item) > -1;\n  }\n\n  export function _traverseDown (context, iterator) {\n    var doContinue = true;\n  \n    (function walkDown (node) {\n      var i, newContext;\n  \n      if (!doContinue) return;\n  \n      if (iterator(node) === false) {\n        //break the traversal loop if the iterator returns a falsy value\n        doContinue = false;\n      }\n      else {\n        for (i = 0; i < node.children.length; i++) {\n          newContext = node.children[i];\n          walkDown(newContext);\n        }\n      }\n    })(context);\n  }\n\n\n  export function _traverseUp (context, iterator) {\n    var i, node, doContinue;\n\n    while (context) {\n      if ( iterator(context) === false ) return;\n\n      for (i = 0; i < context.children.length; i++) {\n        node = context.children[i];\n        if ( iterator(node) === false ) return;\n      }\n      context = context.parent;\n    }\n  }\n  \n  \n  export function _traverse (context, iterator, callback) {\n    var visited = [],\n        callIterator = function (node) {\n          var id = node.id,\n              returned;\n  \n          if (! include(visited, id)) {\n            returned = iterator.call(node, node);\n            visited.push(id);\n  \n            if (returned === false) {\n              return returned;\n            }\n          }\n        },\n        i, node;\n  \n    callback(context, callIterator);\n  }\n  \n\n  export function _removeChild (node) {\n    var parent = node.parent, \n        child,\n        i;\n  \n    for (i = 0; i < parent.children.length; i++) {\n      child = parent.children[i];\n  \n      if (child === node) {\n        return parent.children.splice(i, 1).shift();\n      }\n    }\n  }\n  \n  export function nodeId (parent, separator) {\n    separator = separator || '/';\n    if (parent) {\n      return [parent.id, parent.children.length ].join(separator);\n    }\n    else {\n      return '0';\n    }\n  }\n  \n  \n  export function Arboreal (parent, data, id) {\n    this.depth = parent ? parent.depth + 1 : 0;\n    this.data = data || {};\n    this.parent = parent || null;\n    this.id = id || nodeId(parent);\n    this.children = [];\n  }\n  \n  Arboreal.parse = function (object, childrenAttr) {\n    var root, getNodeData = function (node) {\n          var attr, nodeData = {};\n          for (attr in node) {\n            if (attr !== childrenAttr) nodeData[attr] = node[attr];\n          }\n          return nodeData;\n        };\n  \n    (function walkDown(node, parent) {\n      var newNode, i;\n  \n      if (!parent) {\n        newNode = root = new Arboreal(null, getNodeData(node));\n      } else {\n        newNode = new Arboreal(parent, getNodeData(node));\n        parent.children.push(newNode);\n      }\n      if (childrenAttr in node) {\n        for (i = 0; i < node[childrenAttr].length; i++ ) {\n          walkDown(node[childrenAttr][i], newNode);\n        }\n      }\n    })(object);\n  \n    return root;\n  \n  };\n  \n  Arboreal.prototype.appendChild = function (data, id) {\n    var child = new Arboreal(this, data, id);\n    this.children.push(child);\n    return this;\n  };\n  \n  Arboreal.prototype.removeChild = function (arg) {\n    if (typeof arg === 'number' && this.children[arg]) {\n      return this.children.splice(arg, 1).shift();\n    }\n    if (arg instanceof Arboreal) {\n      return _removeChild(arg);\n    }\n    throw new Error(\"Invalid argument \"+ arg);\n  };\n  \n  Arboreal.prototype.remove = function () {\n    return _removeChild(this);\n  };\n  \n  \n  Arboreal.prototype.root = function () {\n    var node = this;\n  \n    if (!node.parent) {\n      return this;\n    }\n  \n    while (node.parent) {\n      node = node.parent;\n    }\n    return node;\n  };\n  \n  Arboreal.prototype.isRoot = function () {\n    return !this.parent;\n  };\n  \n  Arboreal.prototype.traverseUp = function (iterator) {\n    _traverse(this, iterator, _traverseUp);\n  };\n  \n  Arboreal.prototype.traverseDown = function (iterator) {\n    _traverse(this, iterator, _traverseDown);\n  };\n  \n  Arboreal.prototype.toString = function () {\n    var lines = [];\n  \n    this.traverseDown(function (node) {\n      var separator = '|- ', indentation = '',  i;\n  \n      if (node.depth === 0) {\n        lines.push(node.id);\n        return;\n      }\n      for (i = 0; i < node.depth; i++) {\n        indentation += ' ';\n      }\n      lines.push( indentation + separator + node.id);\n    });\n    return lines.join(\"\\n\");\n  };\n  \n  Arboreal.prototype.find = function (finder) {\n    var match = null,\n        iterator = (typeof finder === 'function') ?\n          finder : function (node) {\n            if (node.id === finder) {\n              match = node;\n              return false;\n            }\n          };\n  \n    this.traverseDown(function (node) {\n      if (iterator.call(this, node)) {\n        match = node;\n        return false;\n      }\n    });\n  \n    return match;\n  };\n  \n  Arboreal.prototype.path = function (path, separator) {\n    separator = separator || '/';\n    //allow path to begin with \n    if (path[0] === separator) path = path.substring(1);\n  \n    var indexes = path.split(separator),\n        index = null,\n        context = this,\n        i;\n  \n    for (i = 0; i < indexes.length; i++) {\n      index = parseInt(indexes[i], 10);\n      context = (context.children.length && context.children.length > index) ? \n        context.children[index] : null;\n    }\n  \n    return context;\n  };\n  \n  Arboreal.prototype.toArray = function () {\n    var nodeList = [];\n    this.traverseDown(function (node) {\n      nodeList.push(node);\n    });\n    return nodeList;\n  };\n\n  Arboreal.prototype.__defineGetter__(\"length\", function () {\n    return this.toArray().length;\n  });\n\n\n  // if (typeof module !== 'undefined' && module.exports) {\n  //   module.exports = Arboreal;\n  // } else {\n  //   this.Arboreal = Arboreal;\n  // }\n\n//}(this);\n","C:\\Users\\josh_\\reactapps\\gt-app\\src\\componenets\\ImportExportSettings.js",["226","227"],"import React, { useState, useRef } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport FileSaver, { saveAs } from 'file-saver';\r\nimport { Button, Input, Label, FormGroup } from 'reactstrap'\r\nimport { loadCourses } from '../redux/course/courseActions';\r\nimport CourseClass from './model/CourseClass';\r\nimport { StyledFileInput } from '../styles/components/appStyles';\r\nimport { notify } from './Notification';\r\nvar obj_csv = {\r\n    size: 0,\r\n    dataFile: []\r\n}\r\n\r\nvar loadCoursesPayload = {\r\n    courses: [],\r\n    prereq: {},\r\n    coreq: []\r\n}\r\n\r\nfunction import_csv(input, callback) {\r\n    console.log(input);\r\n    if (input.files && input.files[0]){\r\n        let reader = new FileReader();\r\n        reader.readAsBinaryString(input.files[0]);\r\n        reader.onload = function(e) {\r\n            console.log(e);\r\n            obj_csv.size = e.total;\r\n            obj_csv.dataFile = e.target.result;\r\n            console.log(obj_csv.dataFile);\r\n            parseCSVData(obj_csv.dataFile);\r\n            callback();\r\n        }\r\n    }\r\n}\r\n\r\nfunction parseCSVData(data) {\r\n    let csvData = [];\r\n    let lbreak = data.split(\"\\n\");\r\n    let currentRead = \"\";\r\n    let courses = [];\r\n    let prereq = {};\r\n    let coreq = [];\r\n\r\n    lbreak.forEach(res => {\r\n        // csvData.push(res.split(\",\"));\r\n        if (res === \"TERMS\" || res === \"PREREQ\" || res === \"COREQ\"){\r\n            currentRead = res;\r\n            return;\r\n        }\r\n        \r\n        if (currentRead === \"TERMS\"){\r\n\r\n            if (res.startsWith('name,')){\r\n                return;\r\n            }\r\n            if (res === \"-\"){\r\n                // new term\r\n                courses.push([]);\r\n                return;\r\n            }\r\n            let course = res.split(\",\");\r\n            if (course.length === 4 && courses.length > 0){\r\n                courses[courses.length - 1].push(new CourseClass(course[0], course[1], Number(course[2]), Number(course[3])));\r\n            }\r\n\r\n        }else if (currentRead === \"PREREQ\"){\r\n            let pC = res.split(\",\");\r\n            if (pC.length > 1){\r\n                prereq[pC[0]] = pC.slice(1);\r\n            }\r\n        }else if (currentRead === \"COREQ\"){\r\n            let cC = res.split(\",\");\r\n            if (cC.length > 1){\r\n                coreq.push(cC);\r\n            }\r\n        }\r\n\r\n    });\r\n    //console.table(csvData);\r\n    console.log(courses, prereq, coreq);\r\n    loadCoursesPayload.courses = courses;\r\n    loadCoursesPayload.prereq = prereq;\r\n    loadCoursesPayload.coreq = coreq;\r\n}\r\n\r\nfunction export_csv(arrayHeader, terms, prereq, coreq, delimiter, fileName) {\r\n    let csv = \"TERMS\\n\";\r\n    let header = arrayHeader.join(delimiter) + \"\\n\";\r\n    csv += header;\r\n    terms.forEach(term => {\r\n        csv += \"-\\n\";\r\n        term.forEach(course => {\r\n            let row = [];\r\n            for (let index in arrayHeader){\r\n                if (course.hasOwnProperty(arrayHeader[index])) {\r\n                    row.push(course[arrayHeader[index]]);\r\n                }\r\n            }\r\n            csv += row.join(delimiter)+\"\\n\";\r\n        })\r\n        \r\n    })\r\n\r\n    csv += \"PREREQ\\n\";\r\n    for (let key in prereq) {\r\n        if (prereq.hasOwnProperty(key)){\r\n            let row = [];\r\n            row.push(key);\r\n            prereq[key].forEach(coursecode => {\r\n                row.push(coursecode);\r\n            })\r\n            csv += row.join(delimiter)+\"\\n\";\r\n        }\r\n    }\r\n    csv += \"COREQ\\n\";\r\n    coreq.forEach(coreqset => {\r\n        csv += coreqset.join(delimiter)+\"\\n\";\r\n    })\r\n\r\n    let csvData = new Blob([csv], { type: 'text/csv' });  \r\n    let csvUrl = URL.createObjectURL(csvData);\r\n\r\n    let hiddenElement = document.createElement('a');\r\n    hiddenElement.href = csvUrl;\r\n    hiddenElement.target = '_blank';\r\n    hiddenElement.download = fileName + '.csv';\r\n    hiddenElement.click();\r\n}\r\n\r\nfunction import_json (input, callback) {\r\n    console.log(input);\r\n    if (input.files && input.files[0]){\r\n        let reader = new FileReader();\r\n        reader.readAsText(input.files[0], 'UTF-8');\r\n        reader.onload = function(e) {\r\n            console.log(e);\r\n            obj_csv.size = e.total;\r\n            obj_csv.dataFile = e.target.result;\r\n            console.log(obj_csv.dataFile);\r\n            if (parseJSONData(obj_csv.dataFile)){\r\n                callback();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction parseJSONData(data) {\r\n    try {\r\n        let obj = JSON.parse(data);\r\n        console.log(obj);\r\n        if (obj.courses && obj.prereq && obj.coreq){\r\n            loadCoursesPayload.courses = obj.courses;\r\n            loadCoursesPayload.prereq = obj.prereq;\r\n            loadCoursesPayload.coreq = obj.coreq;\r\n            return true;\r\n        }\r\n        return false;\r\n    }catch(e){\r\n        return false;\r\n    }\r\n    \r\n}\r\n\r\nfunction export_json (courses, prereq, coreq, fileName){\r\n    var json = JSON.stringify({courses, prereq, coreq });\r\n    var blob = new Blob([json], { type:\"application/json;charset=utf-8\"});\r\n    FileSaver.saveAs(blob, fileName+\".json\");\r\n}\r\n\r\nfunction ImportExportSettings() {\r\n    const [type, setType] = useState('json');\r\n    const { courses, prereq, coreq } = useSelector(state => state.courses)\r\n    const dispatch = useDispatch();\r\n    const fileUploadRef = useRef();\r\n\r\n    const checkBoxChecked = (e) => {\r\n        setType(e.target.value);\r\n    }\r\n\r\n    const handleImport = () => {\r\n        if (type === 'json') {\r\n            if (fileUploadRef.current){\r\n                import_json(fileUploadRef.current, () => {\r\n                    dispatch(loadCourses(\r\n                        loadCoursesPayload.courses,\r\n                        loadCoursesPayload.prereq,\r\n                        loadCoursesPayload.coreq\r\n                    ));\r\n                    notify('Import successful!', 'success');\r\n                });\r\n            }\r\n        }else if (type === 'csv'){\r\n            if (fileUploadRef.current){\r\n                import_csv(fileUploadRef.current, () => {\r\n                    dispatch(loadCourses(\r\n                        loadCoursesPayload.courses,\r\n                        loadCoursesPayload.prereq,\r\n                        loadCoursesPayload.coreq\r\n                    ));\r\n                    notify('Import successful!', 'success');\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleExport = () => {\r\n        if (type === 'json') {\r\n            export_json(courses, prereq, coreq, 'courses');\r\n        }else if (type === 'csv'){\r\n            export_csv(['name', 'code', 'grade', 'credits'], courses, prereq, coreq, ',', 'courses');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"\">\r\n            <Label>Type</Label>\r\n            <FormGroup check>\r\n                <Label check>\r\n                    <Input type=\"radio\" name=\"type\" value=\"json\" checked={type === 'json'} onChange={checkBoxChecked}/>{' '}\r\n                    JSON\r\n                </Label>\r\n            </FormGroup>\r\n            <FormGroup check>\r\n                <Label check>\r\n                    <Input type=\"radio\" name=\"type\" value=\"csv\" checked={type === 'csv'} onChange={checkBoxChecked}/>{' '}\r\n                    CSV\r\n                </Label>\r\n            </FormGroup>\r\n            \r\n            Upload File:{' '}\r\n            <StyledFileInput type=\"file\" id=\"uploadfile\" ref={fileUploadRef} />{' '}\r\n            <Button outline color=\"primary\" onClick={handleImport}>Import</Button>{' '}\r\n            <Button outline color=\"secondary\" onClick={handleExport}>Export</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImportExportSettings\r\n",{"ruleId":"228","replacedBy":"229"},{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","severity":1,"message":"233","line":8,"column":3,"nodeType":"234","messageId":"235","endLine":8,"endColumn":24},{"ruleId":"232","severity":1,"message":"236","line":15,"column":7,"nodeType":"234","messageId":"235","endLine":15,"endColumn":21},{"ruleId":"232","severity":1,"message":"237","line":33,"column":9,"nodeType":"234","messageId":"235","endLine":33,"endColumn":22},{"ruleId":"232","severity":1,"message":"238","line":40,"column":9,"nodeType":"234","messageId":"235","endLine":40,"endColumn":21},{"ruleId":"232","severity":1,"message":"239","line":1,"column":17,"nodeType":"234","messageId":"235","endLine":1,"endColumn":26},{"ruleId":"232","severity":1,"message":"240","line":2,"column":10,"nodeType":"234","messageId":"235","endLine":2,"endColumn":21},{"ruleId":"232","severity":1,"message":"241","line":2,"column":23,"nodeType":"234","messageId":"235","endLine":2,"endColumn":34},{"ruleId":"232","severity":1,"message":"242","line":7,"column":10,"nodeType":"234","messageId":"235","endLine":7,"endColumn":23},{"ruleId":"243","severity":1,"message":"244","line":94,"column":8,"nodeType":"245","endLine":94,"endColumn":63,"suggestions":"246"},{"ruleId":"232","severity":1,"message":"247","line":1,"column":17,"nodeType":"234","messageId":"235","endLine":1,"endColumn":25},{"ruleId":"232","severity":1,"message":"248","line":1,"column":27,"nodeType":"234","messageId":"235","endLine":1,"endColumn":33},{"ruleId":"243","severity":1,"message":"249","line":64,"column":8,"nodeType":"245","endLine":64,"endColumn":36,"suggestions":"250"},{"ruleId":"251","severity":1,"message":"252","line":179,"column":5,"nodeType":"253","messageId":"254","endLine":179,"endColumn":13},{"ruleId":"232","severity":1,"message":"255","line":1,"column":46,"nodeType":"234","messageId":"235","endLine":1,"endColumn":54},{"ruleId":"232","severity":1,"message":"256","line":27,"column":47,"nodeType":"234","messageId":"235","endLine":27,"endColumn":56},{"ruleId":"232","severity":1,"message":"257","line":1,"column":27,"nodeType":"234","messageId":"235","endLine":1,"endColumn":36},{"ruleId":"232","severity":1,"message":"241","line":2,"column":23,"nodeType":"234","messageId":"235","endLine":2,"endColumn":34},{"ruleId":"232","severity":1,"message":"258","line":6,"column":23,"nodeType":"234","messageId":"235","endLine":6,"endColumn":36},{"ruleId":"243","severity":1,"message":"259","line":145,"column":7,"nodeType":"245","endLine":145,"endColumn":51,"suggestions":"260"},{"ruleId":"232","severity":1,"message":"261","line":88,"column":17,"nodeType":"234","messageId":"235","endLine":88,"endColumn":26},{"ruleId":"262","severity":1,"message":"263","line":2,"column":3,"nodeType":"264","messageId":"265","endLine":2,"endColumn":16,"fix":"266"},{"ruleId":"232","severity":1,"message":"267","line":31,"column":18,"nodeType":"234","messageId":"235","endLine":31,"endColumn":28},{"ruleId":"232","severity":1,"message":"268","line":60,"column":9,"nodeType":"234","messageId":"235","endLine":60,"endColumn":10},{"ruleId":"232","severity":1,"message":"269","line":60,"column":12,"nodeType":"234","messageId":"235","endLine":60,"endColumn":16},{"ruleId":"232","severity":1,"message":"270","line":3,"column":21,"nodeType":"234","messageId":"235","endLine":3,"endColumn":27},{"ruleId":"232","severity":1,"message":"271","line":37,"column":9,"nodeType":"234","messageId":"235","endLine":37,"endColumn":16},"no-native-reassign",["272"],"no-negated-in-lhs",["273"],"no-unused-vars","'StyledInnerBottomHead' is defined but never used.","Identifier","unusedVar","'SAMPLE_COURSES' is assigned a value but never used.","'SAMPLE_PREREQ' is assigned a value but never used.","'SAMPLE_COREQ' is assigned a value but never used.","'Component' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'NonceProvider' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateState'. Either include it or remove the dependency array.","ArrayExpression",["274"],"'useState' is defined but never used.","'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["275"],"no-dupe-keys","Duplicate key 'position'.","ObjectExpression","unexpected","'Fragment' is defined but never used.","'scrollTop' is assigned a value but never used.","'useEffect' is defined but never used.","'clearSelected' is defined but never used.","React Hook useEffect has missing dependencies: 'rootNodePosition' and 'updateState'. Either include them or remove the dependency array.",["276"],"'termIndex' is assigned a value but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"277","text":"278"},"'doContinue' is defined but never used.","'i' is defined but never used.","'node' is defined but never used.","'saveAs' is defined but never used.","'csvData' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},[19,32],"","Update the dependencies array to be: [prereq, coreq, courses, selectedCourse, selectedTerm, updateState]",{"range":"285","text":"286"},"Update the dependencies array to be: [currentFocusedElm, courses, dispatch]",{"range":"287","text":"288"},"Update the dependencies array to be: [props.selectedCourse, rootNodePosition, selectedCoursePrereq, updateState]",{"range":"289","text":"290"},[2687,2742],"[prereq, coreq, courses, selectedCourse, selectedTerm, updateState]",[1957,1985],"[currentFocusedElm, courses, dispatch]",[5107,5151],"[props.selectedCourse, rootNodePosition, selectedCoursePrereq, updateState]"]